name: CMake

on: push

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:

    
  
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:

    
    - name: Dependencies
      run: |
        sudo apt install protobuf-compiler
        sudo apt install -y build-essential cmake lsb-release
        
    - name: or-tools
      uses: actions/cache@v3.2.0-beta.1
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: "/home/runner/ortools"
          # An explicit key for restoring and saving the cache
        key: "ortools"
        
    - uses: actions/checkout@v3
    - name: Build or-tools
      if: steps.or-tools.outputs.cache-hit != 'true'
      uses: ./.github/workflows/or-tools.yml

    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DLLVM_DIR="$HOME/llvm" -DCMAKE_PREFIX_PATH=""$HOME/ortools""

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}



