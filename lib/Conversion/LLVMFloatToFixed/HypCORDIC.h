#pragma once
#include "FixedPointType.h"
#include "LLVMFloatToFixedPass.h"
#include "TAFFOMath.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/IR/InstIterator.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/Intrinsics.h"

namespace flttofix
{
/**
 * @brief Handles the exp and exp2 functions.
 *
 * The exp is calculated with the CORDIC algorithm, and relies on the arctanh function which is stored in @ref arctanh_2power.
 * The calculation relies on a series of oscillations which, after some iterations, settle to the desider value.
 * The output is computed differently, depending on how we initialise the internal variables x and y: in our case, we chose to
 * initialise them to the same value, which leads to them ending up at the same value and thus we just return x.
 * The input argument also plays a role in that it oscillates to 0, and its sign is used to decide the sign of the
 * correction that is applied to the internal variables.
 * 
 * The exp2 function is calculated the same way, but y is initialised to 0 and the argument has to be multiplied by ln(2).
 * Also, in case of the exp2 function we must also add together x and y at the end.
 *
 * The value at which we initialise these variables is the (1/An) compile-time constant calculated in @ref compute_An_inv(),
 * which in turn depends on how many range-adjustment iterations
 * we do, as stored in @ref cordic_exp_negative_iterations. This is because the original CORDIC algorithm works for an exponent in the range
 * of about [-1, 1], which is practically useless; the range can be extended by doing these "negative" iterations. We chose to do
 * 6 negative iterations for now, which can support an exponent up to about 15. Beware that the more negative iterations, the more
 * the constant (1/An) will explode in magnitude.
 *
 * Since these oscillations may be huge in magnitude, we need to use a larger fixed point type for the internal representation:
 * we use @ref cordic_exp_internal_width bits in total, with @ref cordic_exp_internal_width_fractional bits for the fractional part.
 * Note that we also need the enhanced precision because in case the exponent is negative, the VRA will allocate few bits for
 * the integer part; however, in these cases the intermediate results will still start at the same magnitude as the positive ones.
 *
 * We chose to perform 64 (i.e. TaffoMath::TABLELENGHT) iterations in total; this amount includes the 6 negative ones. Should
 * someone decide to support larger exponents, they should remember to update @ref arctanh_2power along with the rest. See
 * the documentation for that array for more information.
 *
 * !!! NOTE !!!
 * The textbook loop goes from -negative_iterations to 0 and then from 1 to positive_iterations.
 * HOWEVER: we start from 0 go to total_iterations, reading everything from the same table.
 * Please see the documentation for @ref arctanh_2power.
 *
 * We estimated we need 22 bits for the integer part + 1 for the sign for these internal values.
 */
bool createExp(FloatToFixed *ref, llvm::Function *newfs, llvm::Function *oldf, const bool& isExp2 = false);

bool createLog(FloatToFixed *ref, llvm::Function *newfs, llvm::Function *oldf);

bool createLog10(FloatToFixed *ref, llvm::Function *newfs, llvm::Function *oldf);

bool createLog2(FloatToFixed *ref, llvm::Function *newfs, llvm::Function *oldf);

/// Total number of iterations for the exp CORDIC algorithm
constexpr int cordic_exp_total_iterations = TaffoMath::TABLELENGHT;
/// The number of negative iterations for range expansion in the exp CORDIC algorithm
const int cordic_exp_negative_iterations = 6;
/// The number of positive iterations for the exp CORDIC algorithm
const int cordic_exp_positive_iterations = cordic_exp_total_iterations - cordic_exp_negative_iterations;
/// Width of the extended, internal representation for the exp CORDIC algorithm
const int cordic_exp_internal_width = 64;
/// Fractional part of the internal representation for the exp CORDIC algorithm. We estimate we need 22 bits for the integer part + 1 for the sign.
const int cordic_exp_internal_width_fractional = 64 - 23;
/// The constant e
const double e = 2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427;
/// The constant e^(-1)
const double e_inv = 0.3678794411714423215955237701614608674458111310317678345078368016974614957448998033571472743459196437;
/// The constant ln(2)
const double ln2 = 0.6931471805599453094172321214581765680755001343602552541206800094933936219696947156058633269964186875;

/// Compute the 1/An constant for the exp CORDIC algorithm. Both m and n are expected to be positive.
constexpr double compute_An_inv(const int &m, const int &n)
{
  // From i = -m to 0
  double prod_1 = 1.0;
  for (int i = -m; i <= 0; ++i) {
    prod_1 *= std::sqrt(1.0 - std::pow(1 - std::pow(2.0, i - 2), 2));
  }

  double prod_2 = 1.0;
  for (int i = 1; i <= n; ++i) {
    prod_2 *= std::sqrt(1.0 - std::pow(2.0, -2 * i));
  }

  // Note: empirically, we found that the following makes the result less precise.
  // double prod_3 = std::sqrt(1.0 - std::pow(2.0, -2 * 4)) * std::sqrt(1.0 - std::pow(2.0, -2 * 40)) * std::sqrt(1.0 - std::pow(2.0, -2 * 4));

  // return 1.0 / (prod_1 * prod_2 * prod_3);
  return 1.0 / (prod_1 * prod_2);
}

/**
 * @brief Table for the exp CORDIC algorithm.
 *
 * Each item in this array is calculated as follows:
 * - for NEGATIVE ITERATIONS (i.e. from - @ref cordic_exp_negative_iterations to  to 0 INCLUSIVE), the value is arctanh(1-2^(-i-2)), i.e. in our case the first one is arctanh(1-2^(-6-2)) = arctanh(1-2^(-8))
 * - for POSITIVE ITERATIONS (i.e. from 1 to @ref cordic_exp_total_iterations), the value is arctanh(2^(-i)), i.e. in our case the first one is arctanh(2^(-1))
 *
 * In case you need to add more negative iterations to support larger exponent, you MUST update the following table with the new values. The values we used are reported
 * for your convenience. Please also remember to update @ref cordic_exp_negative_iterations and @ref cordic_exp_positive_iterations accordingly.
 *
 * Both tables for the negative iterations (i.e. @ref cordic_exp_negative_iterations) and positive ones (i.e. @ref cordic_exp_positive_iterations) are stored in this array. This means that the first cordic_exp_negative_iterations+1 elements are for the negative iterations, and the rest are for the positive ones.
 *
 * This table is meant to be indexed consecutively, hence the iterator should not be reset.
 *
 * Values for negative values are needed for range expansion; they go up to m=-6, which is good for about an exponent of 15.544 instead of about 1.12 for the original algorithm.
 *
 * Note that with 32 bits, the last values (how many, depends on the fixed point type of the ARGUMENT) will be discretised as 0.
 * This is not a problem, as that means the successive damping iterations will be null; we are just wasting some cycles.
 */
const double arctanh_2power[TaffoMath::TABLELENGHT] = {
    // Values for negative iterations
    /* arctanh(1 - 2^-8) */ 3.118184795101852217098730800440861150270918787226729426527544503549684919336333280531993910711365211,
    /* arctanh(1 - 2^-7) */ 2.770631772579213073122769594010919939880647462338505980472289981496982928363599006207922250472207324,
    /* arctanh(1 - 2^-6) */ 2.422093543229295636523720403858146197436954561963042881453632603928592630868287688872947559801251667,
    /* arctanh(1 - 2^-5) */ 2.071567363195766343947921608644115569466032922613680045964389408606284224594643600767445004107667852,
    /* arctanh(1 - 2^-4) */ 1.716993602242573122964582162271178605224969465240295985878359036237490708298775616106932415668043315,
    /* arctanh(1 - 2^-3) */ 1.354025100551105032998002285074356672086545956045633586823671112555836640463133365751874816453455850,
    /* arctanh(1 - 2^-2) */ 0.9729550745276566525526763717215898648185423647909305942296950749687899313760346338938292492939357635,
    // Values for positive iterations
    /* arctanh 2^-1 */ 0.5493061443340548456976226184612628523237452789113747258673471668187471466093044834368078774068660444,
    /* arctanh 2^-2 */ 0.2554128118829953416027570481518309674390553982228841350889767789183423472445243988782590616397237610,
    /* arctanh 2^-3 */ 0.1256572141404530388425688652009358398289481930318188575049992586687043618425743329797865055197963253,
    /* arctanh 2^-4 */ 0.06258157147700300712676502386220659570755555024723880682494775638530964743733227470417261756529562397,
    /* ... */ 0.03126017849066699476401224517264889700962924063978732759827198514654325026714722386740281574014012481,
    0.01562627175205221137920177875163755269940172690068237320145729246253760292139037124740926665916669750,
    0.007812658951540420910323471276040172666358809389109552009557195351584102677510013832656316647613020782,
    0.003906269868396826053127563369707785926714952154966438549269931611585163947079132049446019490111067066,
    0.001953127483532549998650770886854175319006680156959160343477115111202871523678814135508913417102870457,
    0.0009765628104410358409644500298853262542384178477892393672892889826436290457880615300248017029462609311,
    0.0004882812888051128267610066262711604168892277082069321137806958020717180273252754365959509402218560490,
    0.0002441406298506385829279722521024436712638161729538473540838898718884917421927910267100564152395556489,
    0.0001220703131063298066029630787370893765950488685976220575203911646340786626569923485332455194776341683,
    0.00006103515632579122531715060972789098445439513193248287051073602149747278819469280129411145533770080035,
    0.00003051757813447390314876195840214273449250632814783497652879918431380828101676529706223499048032126281,
    0.00001525878906368423789309893643232332593252929012133175343880097004879029645246466784506120386487026744,
    0.000007629394531398029736621857417551822259585168152661468555920615941193317259069681442278378808424702192,
    0.000003814697265643503717077247501053784803630239378064127173696795195632912450620386871438743811974720491,
    0.000001907348632814812964634640791502342660236767104749725717162909750412542736136512885500621683984176570,
    0.0000009536743164065391205793296256212496983850880401927809597468355899738309425621134351599726286988554803,
    0.0000004768371582031611400724161884115142393921535238599653818506354689240616058526602310832981335142648965,
    0.0000002384185791015670175090520230892160932709887487983249122290761708315768215284598314352905928958611214,
    0.0000001192092895507818146886315028717075370759685916006931541372667959741042013096116381894887430546278058,
    0.00000005960464477539069558607893785851205230378030981967369923923643930968219432059665194692992724885825675,
    0.00000002980232238769532132325986723229990060576267123261864264303930424591915949407520598352649862617181254,
    0.00000001490116119384765735290748340403704676533877554591227217196424776397793297417444913879858590477331712,
    0.000000007450580596923828262863435425504617070342923244554568998159436907192708439693875004142928268316332986,
    0.000000003725290298461914079732929428188076703313977164985495600947820388535746995138910864212327575114897691,
    0.000000001862645149230957033404116178523509574461781888104942902562764320560333040723976348563163870135559775,
    0.0000000009313225746154785158942645223154386963873331967156727402409773742360086730774616696225463462546236132,
    0.0000000004656612873077392578461580652894298370352794764864139324800383843514154788815737699407971919086561945,
    0.0000000002328306436538696289104572581611787296289993979013315803086781286536291653567595230362843624488559169,
    0.0000000001164153218269348144536509072701473412036120954670580049994826705458101990105856850325505459565088269,
    0.00000000005820766091346740722662823840876841765045111101867573679558840788649955278258833427310111544924799954,
    0.00000000002910383045673370361328946730109605220630637634874988854228145966414731175203775785324471878479108374,
    0.00000000001455191522836685180664165216263700652578829665207546798787371085510467020600862828814371176246721826,
    0.000000000007275957614183425903320440895329625815723537069274487620986980369303969061460651571410766384991681521,
    0.000000000003637978807091712951660172299416203226965442133276968893951583999676046764878999360758953249398019039,
    0.000000000001818989403545856475830080131177025403370680266647672922410454607881789101436466056144142688769450642,
    0.0000000000009094947017729282379150393132721281754213350333305857343846351574827949927332833946775762242219938997,
    0.0000000000004547473508864641189575195625965160219276668791663115486444334050446484789629420236729489978928699015,
    0.0000000000002273736754432320594787597695433145027409583598957885789507527384543091568977972770695826766873639847,
    0.0000000000001136868377216160297393798833022893128426197949869735609741627973950301476443334101850493961929165232,
    0.00000000000005684341886080801486968994146747366410532747437337169476568655920838631542529508705538356363670455777,
    0.00000000000002842170943040400743484497071077795801316593429667146183458320144898602527096668006517710333945315829,
    0.00000000000001421085471520200371742248535251911975164574178708393272897516210449630740395848482712624262262349639,
    0.000000000000007105427357601001858711242675900827468955717723385491591111028448167446370653799660239755570734634112,
    0.000000000000003552713678800500929355621337905572183619464715423186448888538968055474794617943365556545846283206139,
    0.000000000000001776356839400250464677810668947180897952433089427898306111056758883013849273687245945399102061698034,
    0.0000000000000008881784197001252323389053344728897997440541361784872882638817632315042155325372909072633552880506785,
    0.0000000000000004440892098500626161694526672363573187180067670223109110329852100405357608282336108997856840432274897,
    0.0000000000000002220446049250313080847263336181677117147508458777888638791231509312106492874875279104850156503314261,
    0.0000000000000001110223024625156540423631668090824874018438557347236079848903938562808211354346386934359958670717645,
    0.00000000000000005551115123125782702118158340454107264398048196684045099811129923171883670363241413994904226184586651,
    0.00000000000000002775557561562891351059079170227051493987256024585505637476391240395497127738227315197080349455766764,
    0.00000000000000001387778780781445675529539585113525479717157003073188204684548905049406255621741606226126209968930015,
    0.000000000000000006938893903907228377647697925567627064490196253841485255855686131311748167856696755228436251925837260};

const double arctanh_2power_2[TaffoMath::TABLELENGHT] = {
    // Values for negative iterations
    /* arctanh(1 - 2^-8)/log2 */ 4.498589740468810668652993242695836138462708210067211667280536511191495726781147424630110723730586319793,
    /* arctanh(1 - 2^-7)/log2 */ 3.997176718429428968789062192123805519317956541530941180318559057371864756725182923334881685060571335238,
    /* arctanh(1 - 2^-6)/log2 */ 3.494342343386082926640001946150851384840782323475593266472051023562913152441008206454022902619338393061,
    /* arctanh(1 - 2^-5)/log2 */ 2.988639961749958235174723602563731913080327720675551452294398516576258652225455055771210974503193634659,
    /* arctanh(1 - 2^-4)/log2 */ 2.477098155193437604403061799587777211774511160798190334433649361039635345929229326754120158620323092381,
    /* arctanh(1 - 2^-3)/log2 */ 1.953445297804259264662029186718603342312322900358530836255254525178516502201491889186210109138729198599,
    /* arctanh(1 - 2^-2)/log2 */ 1.403677461028802053720984658615915404320513312983070391838645862035160424431096493248930499585105392567,
    // Values for positive iterations
    /* arctanh(2^-1)/log2 */ 0.7924812503605780907268694719739082543799072038462405302278763272705491138971792812611402374590441210456,
    /* arctanh(2^-2)/log2 */ 0.3684827970831030832082902427707868335525084926660497757995018706374182744071333266639296342206409565079,
    /* arctanh(2^-3)/log2 */ 0.181285039692354127732754285331901104439301094709410668617106792505937803363262069273349975332982849538,
    /* arctanh(2^-4)/log2 */ 0.09028612282091043946500381868659883469331074081387950780805000701483175232219914496246146678311293801554,
    /* ... */ 0.0450989044857891144234891957490275219570118058889342314506277890940790778279591308617657284821712730528,
    0.02254394476426901895884243930931054166630617673225753850221144425313632939537020222754716231706889105449,
    0.01127128432554413352893834605709058552327247370442163056854015901022246343465859376272454123894701541432,
    0.005635556167510084670867359213227781542598299238234837635088831864759732021552778951129941040356001392775,
    0.002817767334716350424374884679305836023767186302276930693854836052434219013122862554664015732634303246304,
    0.001408882323739871223692288326262580705631458304358211461958941416291975769865927801712147114377829716325,
    0.0007044409939180080000547720697377750543722501634276262337378545869797646529892229000272699426247293786148,
    0.0003522204759650243106098360594897194224718971317459136079586090864884853454331634094488725979579368502184,
    0.0001761102353582650460667498996451463109501753773043467118872099789641615327584295099501398722281842683914,
    0.00008805511735110164537669664038650396023740604867876021409934744994396790677652752978813529120355218781935,
    0.00004402755863454696332495391419816994494293875185437835014580377816320630765786777304070200491556142763237,
    0.00002201377931214799925279298069605760005239238997829130300096815947672637598499423849173444106398034029857,
    0.00001100688965543331432552162843259491815735784629823940427155405351389346780829121132470175343528886958001,
    0.000005503444827636571500161945074828372396702719590098573784218579765990451236753920293150323054117594580945,
    0.00000275172241380827504225644166341675134664368657492231182861819651100832300238052690789180104948500428126,
    0.000001375861206902886182650164715230139678385402708105613823264689655131556595543668648396063418293749745637,
    0.0000006879306034512866740153256631418979415982985326308854657950266297512107001807706630632298930289240861198,
    0.0000003439653017256237848439432547645089711296578349237437177693724075503540969386026653262851406437137801394,
    0.0000001719826508628094484015066805940340633412491230971798366966789121717928947157652347601881438419366684776,
    0.00000008599132543140441869819522195825774694689760790930156501186812333464526324988197876691206704954091451064,
    0.00000004299566271570217116127784618708922125967731381967343793946714547634085162354787575965649132794481660652,
    0.0000000214978313578510808071614524945491934273889198935829819991876310811637822157124077857481283582474940029,
    0.00000001074891567892553980689604242240046766727173342059693581100053114388100194574602277456290717629507075289,
    0.000000005374457839462769828862435733090977018579384975794492129517836216783899439392668177815259911141920930708,
    0.000000002687228919731384905108019681781831698524705992373901880281122259536104686006961630881424745179734661596,
    0.000000001343614459865692451388610067795458757014138238036834211607352644777286561238905652573044072964937819682,
    0.0000000006718072299328462255486300622607972422603362915555994274168891659537761062641902305644540726408786148533,
    0.000000000335903614966423112756105659675782104108210730385758344909669359485547320850733711682475560996891198432,
    0.0000000001679518074832115563757766584060639874266383191451493401360551214025215590697831670570928697955668354192,
    0.00000000008397590374160577818760380777405361063489445478149204536508714763830042427858435297916072104651635395304,
    0.00000000004198795187080288909376633870840450743264441041576330723020435659353974285332870858697455403355477069377,
    0.00000000002099397593540144454687872370687446648072186155863077082842003651305878758573309293210466977567440747612,
    0.00000000001049698796770072227343880614752125983591088808792846121102663366948132286256683620904893238230228738362,
    0.000000000005248493983850361136719333610521133242399188715814909959651390109352093996429269120734177012521235397154,
    0.000000000002624246991925180568359658122355629536755062442147353801578454099877201365361653454561381573192227554386,
    0.00000000000131212349596259028417982797581469763282196473161174437546099380202232984332253726482366822522360097401,
    0.000000000000656061747981295142089913852236959174466536554623383125875488741003930591415122469283862163931422946938,
    0.0000000000003280308739906475710449569091596808819902125509138883209499627566255078645544868289904112115821607615967,
    0.0000000000001640154369953237855224784524599906028397243096572190018122616267695857177619561299847219461730067204872,
    0.00000000000008200771849766189276123922596501407165043940910364386377909562413537773720340500323875889826255902870874,
    0.0000000000000410038592488309463806196129493843821040418613362012274894748127769332566775320429220144888252470466385,
    0.00000000000002050192962441547319030980647055185933687370026614802570225348145729159179466740699363238596247624632936,
    0.00000000000001025096481220773659515490323475838820404344633282993934605141261162921054639708584004118297844874783353,
    0.000000000000005125482406103868297577451617314501418972547691384460484898639119293166298615081623908505230811380395175,
    0.000000000000002562741203051934148788725808649164124105126911313416593933665812209704346055971147158483911084102508589,
    0.000000000000001281370601525967074394362904323571238879920088859356590902383364265189231014394459142840677678823047525,
    0.0000000000000006406853007629835371971814521616592665433796235800093321931357136710725886427750619438411086842265536247,
    0.0000000000000003203426503814917685985907260808138391596172591837960456893108677862346609910621575708784921064695497488,
    0.0000000000000001601713251907458842992953630404049453157995605161219452937483104809667707051068882838216551965876548215,
    0.00000000000000008008566259537294214964768152020222587489864662358896295301076482080869489049624786588089958254974915618,
    0.0000000000000000400428312976864710748238407601010820895741816074854802647724586081588901847330315089577172530986327493,
    0.00000000000000002002141564884323553741192038005053718880269809070411498091961382880544665502844348618479857377077883644};


const double arctanh_2power_10[TaffoMath::TABLELENGHT] = {
    // Values for negative iterations
    /* arctanh(1 - 2^-8)/log10 */ 1.354210450067356365893301579531472363968220325817811445806818492622631449137939975592468278324533795176,
    /* arctanh(1 - 2^-7)/log10 */ 1.203270090216977585310729451429479656219753180576816860449903330761407512883177399675862886813947634495,
    /* arctanh(1 - 2^-6)/log10 */ 1.051901860477978432123493710913643129288281619896196933884391137617270614270269695007323540233125547343,
    /* arctanh(1 - 2^-5)/log10 */ 0.8996702747267908526511360325514334059419150623526785680816831171643558727347007060760241195713605881796,
    /* arctanh(1 - 2^-4)/log10 */ 0.745680846917136339833352050059207861151850779152092327969174860037795303848110311526307924150836908116,
    /* arctanh(1 - 2^-3)/log10 */ 0.5880456295278406210406445042653111412159694913642936617597190895890604817546183067780205517647150647357,
    /* arctanh(1 - 2^-2)/log10 */ 0.4225490200071284153561081292963180967417861981619827032518174768591267199510395830330557639237442866702,
    // Values for positive iterations
    /* arctanh(2^-1)/log10 */ 0.2385606273598312186475139516275576546000644320953479324149328201526145763918305615214841778238081507547,
    /* arctanh(2^-2)/log10 */ 0.1109243748081781837456166010101958320158406271735977969298534492838313289709571837350521961170987632245,
    /* arctanh(2^-3)/log10 */ 0.05457223471253402193891977395879721245834266602871316157804816344610243283262154000991259172387201483969,
    /* arctanh(2^-4)/log10 */ 0.02717883116129634322944044289885737378781419784822953693046515158328654937394078611982178328451750501758,
    /* ... */ 0.01357612302180739918926188718986191430156474817648215174402746945469578866034492378082364686583683213899,
    0.006786403594636934345247099057484296088854591109801297163698639770866578443184159584335981498996155634892,
    0.003392994671646049726564317328525604716170254389197705792916381991909479256727365489548371777685716371574,
    0.001696471448669683270718281530336259245241765234489249082950898170861121061251412305816717121706051520015,
    0.0008482324885517708174070132296652588075376391654811508913894021890877007128730704191764655969936082190064,
    0.0004241158398064731850010429513197363918006289740681955108737222823617490804034745859689397433967658624216,
    0.0002120578693446685517656811592138880447240229891533015285003557797131094018441135730344165878997848006919,
    0.0001060289283525166610077662311338792233866848370716211676583599458756458734449774229523541283740242535257,
    0.00005301446338628123458870217742570544605684797445741289646528826970394946867718820269548179749321871164293,
    0.00002650723159439348361570927129321133951058584197974607363875696538081134080133958347390146659984519666645,
    0.00001325361578485335020148552287839547815304256948095972334827681687144733869217209690832006795597593611484,
    0.000006626807890883751153179782134585330002733801128595058736213367778359857463046031724843303498985373167079,
    0.000003313403945249010083245554897433148391414901724261368631147912158850762563754848893815610012963900732945,
    0.000001656701972600396854957892810082599379969158523937104395592532822465457307399843412699620827011045070937,
    0.0000008283509862971849041459344934182387089051563681916348812680543846248552240024290305212931725993408206292,
    0.0000004141754931482157616563438411376799140885371801572380242066971868105264558882177352115641672385916580061,
    0.0000002070877465740607945260940912280801254588352501768666565324736041118659575089783712291699484509797546577,
    0.0000001035438732870245114752873199575597743504134084886692040460021300371181579063871186167148694379180656104,
    0.0000000517719366435115200141736943658171852080577202251460473954838470072071620306207017335406710852674586433,
    0.00000002588596832175566804165310148422879654814184647004680792901323588840243469783030835633830788381718666682,
    0.00000001294298416087782252514733252987131569489774939946441278719085982590760151150026649112586339023238221666,
    0.000000006471492080438909825613763988408144147796374906273956855183283700687827450994239614637605701085900389599,
    0.000000003235746040219454733186894209638222599652379570480113034022205250939494934133863234989759064099336585258,
    0.000000001617873020109727344140948631748382919864549880891366287990308979385048301450653883479656186552894141159,
    0.0000000008089365100548636692639120067403505000720413924328149941344814721584919955656847011080655046790285497051,
    0.0000000004044682550274318342811357147284451327920843602157588129678433286598267691227435746832783256548302144158,
    0.0000000002022341275137159170967153212840063018261311649047033149686998568046703458181215603430629852171065041186,
    0.0000000001011170637568579585428760936319761178445011126393579271008356966571332022143138575965279935688199874568,
    0.00000000005055853187842897927075285093973467978876357281453609978542411530838275152310345465277982628467648673395,
    0.0000000000252792659392144896352907759853356675026985251947964841887419911383576450692333534212352920376436685346,
    0.00000000001263963296960724481763468180710137470238893656226652426470767633475876481237310602412419099247291706632,
    0.000000000006319816484803622408816002630354879970074430077255148275000077585024574440852812697266544582650459248534,
    0.000000000003159908242401811204407834031027964062397210342846352120060636042088925658689663598668373355470471336401,
    0.000000000001579954121200905602203896104995297540868604586941259002060699468564152646378434575774249849493893237695,
    0.0000000000007899770606004528011019454386828132091430522204882253592282195024508575240796923723543211933898120199896,
    0.0000000000003949885303002264005509723926145521594101198511237445209652207249724269457911832236803268451360517437284,
    0.0000000000001974942651501132002754861554664192740598841431719022518726360233522726368334157604669631308706475569164,
    0.00000000000009874713257505660013774307262810253632429509878720725021073174394525885112118811936316938582001086395983,
    0.00000000000004937356628752830006887153567591288057394167779376071486937572990192177768649379862291167464955860818586,
    0.00000000000002468678314376415003443576775818914183844510494689999597486747661073655896954152029910882498699588937779,
    0.00000000000001234339157188207501721788386912365861315683572970245287744613911967192969151249618857446915121938377504,
    0.000000000000006171695785941037508608941933315465268320203271882783302239930579024911479128805966564683600463134983655,
    0.00000000000000308584789297051875430447096650193712937782481182033625913036388307985501740878024426243974416397486805,
    0.000000000000001542923946485259377152235483231494126591127802895036205568693983428626823080962514969519895490891396844,
    0.000000000000000771461973242629688576117741613312758533340826070626612284855128753300025982741095190031002441810344051,
    0.0000000000000003857309866213148442880588708063520911713925286132018698299932418753639398011901613269394173603977524846,
    0.0000000000000001928654933106574221440294354031380095737865287538370053759423981365474795019643178180466049204433756332,
    0.00000000000000009643274665532871107201471770156425028540454743282301149558942332786712434959524434828561469565918903307,
    0.00000000000000004821637332766435553600735885078153083001618409839956934874698976231196012145056819139247763364168018605,
    0.00000000000000002410818666383217776800367942539069112592233084694829262449252964551356808130147454589438139180901504601,
    0.00000000000000001205409333191608888400183971269533627682544527319270980601114416836586655188665396041076894869245416771,
    0.000000000000000006027046665958044442000919856347666977645757617811175339726182002386080590118563218675482081910796171217};

} // namespace flttofix